{
  "swagger": "2.0",
  "info": {
    "title": "Project 1.0 API",
    "description": "Provides access to project data.",
    "version": "1.0"
  },
  "host": "localhost:3000",
  "basePath": "/v1",
  "schemes": [
    "http"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Must be called to get an API key, which is then passed into methods requiring login",
        "tags": [
          "Login"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing the username and password of the user. Put username under the key \"username\".",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "fooname",
                  "description": "username"
                },
                "password": {
                  "type": "string",
                  "example": "password",
                  "description": "the user's password"
                }
              }
            }
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "All users",
        "description": "List of all users in the system",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/keyParam"
          },
          {
            "$ref": "#/parameters/pageNumParam"
          },
          {
            "$ref": "#/parameters/pageSizeParam"
          },
          {
            "$ref": "#/parameters/sortParam"
          },
          {
            "$ref": "#/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/parameters/searchParam"
          }
        ]
      },
      "post": {
        "summary": "Creates a new user",
        "description": "Creates a new user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/keyParam"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Object containing the fields to create for the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          },
          {
            "name": "contact",
            "in": "query",
            "description": "Query parameter describing if this user is a contact. ie(contact=\"true\")",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a User",
        "description": "Returns user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/keyParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User's unique id",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "summary": "Update user",
        "description": "Alters a user's information",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/keyParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User's unique id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Object containing the fields to change for the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ]
      },
      "delete": {
        "summary": "Deletes a user",
        "description": "Removes a user from being used in any endpoint",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/keyParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User's unique id",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "summary": "Health Check",
        "description": "Responds to ping with a pong",
        "tags": [
          "Ping"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "pong"
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "keyParam": {
      "in": "header",
      "name": "x-project-jwt",
      "description": "The API key provided by /login",
      "required": true,
      "type": "string"
    },
    "pageNumParam": {
      "name": "pageNum",
      "in": "query",
      "description": "Page number of results to return. Numbers start with 1.",
      "required": false,
      "type": "integer"
    },
    "pageSizeParam": {
      "name": "pageSize",
      "in": "query",
      "description": "The number of results to return per page.",
      "required": false,
      "type": "integer"
    },
    "sortParam": {
      "in": "query",
      "name": "sort",
      "description": "The data field to sort",
      "required": false,
      "type": "string",
      "maxLength": 255
    },
    "sortDirectionParam": {
      "in": "query",
      "name": "sortDir",
      "description": "The direction to sort (ASC or DESC)",
      "required": false,
      "type": "string",
      "maxLength": 255
    },
    "searchParam": {
      "in": "query",
      "name": "search",
      "description": "A string to use to filter results",
      "required": false,
      "type": "string",
      "maxLength": 255
    },
    "limitParam": {
      "name": "limit",
      "in": "query",
      "description": "The max number of items to return.",
      "required": false,
      "type": "integer"
    },
    "requiredLimitParam": {
      "name": "limit",
      "in": "query",
      "description": "The max number of items to return (required).",
      "required": true,
      "type": "integer"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "maxLength": 255,
          "description": "unique handle for the user",
          "example": "jdoe1980"
        },
        "password_reset_key": {
          "type": "string",
          "maxLength": 255,
          "description": "hash which allows a password reset",
          "example": "bbc53980e27540ba87b352a8c4ed0ed4"
        },
        "password_reset_key_expiration": {
          "type": "string",
          "maxLength": 255,
          "description": "date time of when the password_reset_key expires",
          "example": "2017-01-17T22:21:11.958Z"
        },
        "sms_number": {
          "type": "string",
          "maxLength": 255,
          "description": "number at which the user can receive texts",
          "example": "512-555-1212"
        },
        "email": {
          "type": "string",
          "maxLength": 255,
          "description": "email address for the user",
          "example": "user@example.com"
        },
        "last_login": {
          "type": "string",
          "maxLength": 255,
          "description": "timestamp for last time user logged in, or null if the user has never logged in",
          "example": "2016-12-07T23:50:39.386Z"
        }
      }
    },
    "UserCreate": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "maxLength": 255,
          "description": "unique handle for the user",
          "example": "jdoe1980"
        },
        "password": {
          "type": "string",
          "maxLength": 255,
          "description": "hash of the user's password",
          "example": "password"
        },
        "sms_number": {
          "type": "string",
          "maxLength": 255,
          "description": "number at which the user can receive texts",
          "example": "512-555-1212"
        },
        "email": {
          "type": "string",
          "maxLength": 255,
          "description": "email address for the user",
          "example": "user@example.com"
        },
        "real_name": {
          "type": "string",
          "maxLength": 255,
          "description": "name for the user",
          "example": "Joe User"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "sms_number": {
          "type": "string",
          "maxLength": 255,
          "description": "number at which the user can receive texts",
          "example": "512-555-1212"
        },
        "email": {
          "type": "string",
          "maxLength": 255,
          "description": "email address for the user",
          "example": "user@example.com"
        },
        "real_name": {
          "type": "string",
          "maxLength": 255,
          "description": "name for the user",
          "example": "Joe User"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string",
          "maxLength": 255
        },
        "error": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "ExpandedError": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string",
          "maxLength": 255,
          "example": "false"
        },
        "error": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "maxLength": 255,
              "example": "fetch_objects_failed"
            },
            "message": {
              "type": "string",
              "maxLength": 255,
              "example": "Failed to fetch objects: <err msg>"
            }
          }
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "CreatedAt": {
      "type": "string",
      "maxLength": 255,
      "description": "The date this object was created",
      "example": "2016-11-28T13:59:29.135Z"
    },
    "UpdatedAt": {
      "type": "string",
      "maxLength": 255,
      "description": "The date this object was last updated",
      "example": "2016-11-28T13:59:29.135Z"
    }
  }
}
